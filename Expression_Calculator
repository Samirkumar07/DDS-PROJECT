#include <iostream>
#include <stack>
#include <string>
#include <cctype>
#include <cmath>
using namespace std;

int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

string infixToPostfix(const string &infix) {
    stack<char> st;
    string postfix;
    for (size_t i = 0; i < infix.size(); i++) {
        char c = infix[i];
        if (isspace(c)) continue;
        if (isdigit(c)) {
            while (i < infix.size() && (isdigit(infix[i]) || infix[i] == '.')) {
                postfix += infix[i++];
            }
            postfix += ' ';
            i--;
        }
        else if (c == '(') {
            st.push(c);
        }
        else if (c == ')') {
            while (!st.empty() && st.top() != '(') {
                postfix += st.top(); postfix += ' ';
                st.pop();
            }
            if (!st.empty() && st.top() == '(') st.pop();
        }
        else if (isOperator(c)) {
            while (!st.empty() && precedence(st.top()) >= precedence(c)) {
                postfix += st.top(); postfix += ' ';
                st.pop();
            }
            st.push(c);
        }
    }
    while (!st.empty()) {
        postfix += st.top(); postfix += ' ';
        st.pop();
    }
    return postfix;
}

double evaluatePostfix(const string &postfix) {
    stack<double> st;
    for (size_t i = 0; i < postfix.size(); i++) {
        char c = postfix[i];
        if (isspace(c)) continue;
        if (isdigit(c)) {
            double num = 0;
            while (i < postfix.size() && (isdigit(postfix[i]) || postfix[i] == '.')) {
                if (postfix[i] == '.') {
                    double frac = 0, div = 10;
                    i++;
                    while (i < postfix.size() && isdigit(postfix[i])) {
                        frac += (postfix[i] - '0') / div;
                        div *= 10;
                        i++;
                    }
                    num += frac;
                    break;
                }
                num = num * 10 + (postfix[i] - '0');
                i++;
            }
            st.push(num);
            i--;
        }
        else if (isOperator(c)) {
            if (st.size() < 2) {
                cout << "Invalid postfix expression.\n";
                return 0;
            }
            double b = st.top(); st.pop();
            double a = st.top(); st.pop();
            double res = 0;
            switch (c) {
                case '+': res = a + b; break;
                case '-': res = a - b; break;
                case '*': res = a * b; break;
                case '/': 
                    if (b == 0) {
                        cout << "Error: Division by zero.\n";
                        return 0;
                    }
                    res = a / b; break;
                case '^': res = pow(a, b); break;
            }
            st.push(res);
        }
    }
    return st.empty() ? 0 : st.top();
}

int main() {
    cout << "Expression Calculator (supports +, -, *, /, ^ and parentheses)\n";
    cout << "Enter an expression: ";
    string expr;
    getline(cin, expr);
    string postfix = infixToPostfix(expr);
    cout << "Postfix: " << postfix << "\n";
    double result = evaluatePostfix(postfix);
    cout << "Result: " << result << "\n";
    return 0;
}
